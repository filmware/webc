We like event sourcing for it's system-of-record-like properties and ease of
streaming to the client.

Is postgres the right tool for the job?

- Bradley's suggestions:
    - citus
    - kafka
    - google spanner
- There is a pattern called "CQRS": command query responsibility separation
- https://www.eventstore.com/eventstoredb
    - looks great but only supports grpc
- kafka has some drawbacks for any strategy other than server-side total
  replication (aka you'd need another layer between the kafka storage and the
  client):
    - https://medium.com/digitalfrontiers/
      the-good-the-bad-and-the-ugly-how-to-choose-an-event-store-f1f2a3b70b2d
    - solution seems to be another layer, this seems common:
      https://www.confluent.io/blog/event-sourcing-outgrows-the-database/
- reddit recommends:
    - https://www.reddit.com/r/softwarearchitecture/comments/u2r1rf/
      what_is_the_best_database_for_a_eventstore/
    - eventstore
    - cassandra
    - kafka
- eventstore looks featureful but is built on grpc which I dislike
- mongodb also looks cool, and I like the simplicity of the data model.  The
  mongodb could even store user-defined columns in reports natively
- cassandra looks really cool with it's 100% uptime model.  It's columnar nosql
  looks less flexible than mongodb's document model.
- skylladb looks even more badass, the high-scale performance numbers
  are quite impressive.
- amazon has a good cassandra vs mongodb:
  aws.amazon.com/compare/the-difference-between-cassandra-and-mongodb
- kafka + ksqldb looks purpose-built for this, but ksqldb claims to be
  a "fast-moving project" which sounds like a real con to me.  It's not
  even 1.0 yet.

Conclusion:
    - sticking to postgres, which I know, so it is fast for prototyping, and
      I think is enough for production, and is free, and is very stable
    - what if it doesn't scale?
        - for postgres, transitions to distributed postgres exist, like citus,
          which is free, or google spanner, which if were making money would
          probably be an easy and reliable option.
        - cassandra or skylladb have great uptime properties
    - Honestly, the data model is designed to make writes cheap, replication
      trivial, and transactions unimportant.  This data model also works well
      for offline applications, which is a major design goal.  With this in
      mind, I'm not sure that it matters much which thing we pick.  Postgres
      works for now.  Later, streaming all the data into a different datastore
      would be trivial, and the client shouldn't even know the difference.

